1. Simple Login of Website (DONE)
    - Private Routes 
    - AuthContext (State Management)

2. Finalize the Website Routings and Pages (DONE)

3. Style the Website:
    - Get Tailwind to work (DONE) - Could be the tailwind config file...
    - Header (DONE)
    - Footer (DONE)
    - Pages 
        - Home (DONE)
        - Login (DONE)
        - Contact Us (DONE)
            - Understand the contact form and how the code works

4. Simple Form for customer details (DONE)
    - Input Validations (DONE)
    - Set up backend Server (DONE)
    - Understand how the Backend Server Works (DONE)
        - Index.js (DONE)
        - Router (DONE)
    - Data Storage with MongoDB (DONE)

5. Update Login to a secure google based login (DONE)
    - Understand your options: 
        - Firebase (Expensive) 
        - google-login (@react-oauth/google) - Just provides token, you need to set up user access in backend
        - Auth0 - Most popular option
    - Look into Auth0 integration (DONE)
        - how to add Auth0 to authcontext (DONE)
        - Look into Callbacks (DONE)
        - Set up the .env file (DONE)
        - Make sure the user stays logged in eventhough the Browser Refreshes.(DONE)

6. Create a Product Page that can be updated by loggin in with a user profile. (DONE)
    - Start with the Product page.(DONE) 
    - Link the showroom data to a database (DONE)
    - Add Images to the Database (DONE)
    - Make updates to the showroom data on a settings page. (DONE)
        - Fix the Botton Banner position on the page. (DONE)
        - List of all the entries and fields and update existing data in DB (DONE)
        - Add products and delete products (DONE)
        - Upload Image (DONE)
        - Add Description Field (DONE)
        - Add a Search Function (DONE)

7. Create a Dropdown (DONE)

8. Add a Map to Contact Us (DONE)
    - Implement Leaflet
    - Update the CSS/Tailwind to accomodate small screens

9. Create a Product Basket (DONE)
    - Add from product page to the Customer Basket (DONE)
    - Set up the Backend to accomodate the product submission and fetch (DONE)
    - Add a remove button for the Basket (DONE)
    - Add a quantity and be able to update it in the Basket. (DONE)
    - Update the Basket with the latest info from the UserSettings when updated. (IN-PROGRESS)
        - Make sure it checks throught the entire basket and make the updates to the necessary Identities. (DONE)
        - Fix Checkout Quantity Update (DONE)
        - Apply the fixes to the Delete function too. (DONE)


10. Checkout Component




- Link Basket to DB (IN-PROGRESS)
    - Backend
        - Schema
        - Router Endpoints
    - Frontend
        - Fetch

- Create a Basket and a PayGate (In-Progress)

    1. Post Basket to DB (NEXT)
            - When button clicked, Product should add to array in DB (Add product component as example)
            - Basket should fetch the array of products and display them in a list. 


    - Customer Register and Sign-in 
        - Google Authentication for Customers
    - Use customerID to save product Basket to the DB for personalization
    - When Pay the payment is approved, the Product Basket should clear in DB and the Data should be added to a UserProductHistoryTable.

    
    - Design Basket Component
    - Implement Add to Basket Functionallity
    - Create a Paygate Component
    - Integrate a Payment Gateway
    - Handle Payment Responses
    - Update Basket and Inventory
    - Security and Validations
    - Testing

- Add a Out of Stock Button in the UserSettings. Button should Display Out-of-Stock Text.
- Production the Application 