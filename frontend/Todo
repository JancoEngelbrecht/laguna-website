1. Simple Login of Website (DONE)
    - Private Routes 
    - AuthContext (State Management)

2. Finalize the Website Routings and Pages (DONE)

3. Style the Website:
    - Get Tailwind to work (DONE) - Could be the tailwind config file...
    - Header (DONE)
    - Footer (DONE)
    - Pages 
        - Home (DONE)
        - Login (DONE)
        - Contact Us (DONE)
            - Understand the contact form and how the code works

4. Simple Form for customer details (DONE)
    - Input Validations (DONE)
    - Set up backend Server (DONE)
    - Understand how the Backend Server Works (DONE)
        - Index.js (DONE)
        - Router (DONE)
    - Data Storage with MongoDB (DONE)

5. Update Login to a secure google based login (DONE)
    - Understand your options: 
        - Firebase (Expensive) 
        - google-login (@react-oauth/google) - Just provides token, you need to set up user access in backend
        - Auth0 - Most popular option
    - Look into Auth0 integration (DONE)
        - how to add Auth0 to authcontext (DONE)
        - Look into Callbacks (DONE)
        - Set up the .env file (DONE)
        - Make sure the user stays logged in eventhough the Browser Refreshes.(DONE)

6. Create a Product Page that can be updated by loggin in with a user profile. (DONE)
    - Start with the Product page.(DONE) 
    - Link the showroom data to a database (DONE)
    - Add Images to the Database (DONE)
    - Make updates to the showroom data on a settings page. (DONE)
        - Fix the Botton Banner position on the page. (DONE)
        - List of all the entries and fields and update existing data in DB (DONE)
        - Add products and delete products (DONE)
        - Upload Image (DONE)
        - Add Description Field (DONE)
        - Add a Search Function (DONE)

7. Create a Dropdown (DONE)

8. Add a Map to Contact Us (DONE)
    - Implement Leaflet
    - Update the CSS/Tailwind to accomodate small screens

9. Create a Product Basket (DONE)
    - Add from product page to the Customer Basket (DONE)
    - Set up the Backend to accomodate the product submission and fetch (DONE)
    - Add a remove button for the Basket (DONE)
    - Add a quantity and be able to update it in the Basket. (DONE)
    - Update the Basket with the latest info from the UserSettings when updated. (DONE)
        - Make sure it checks throught the entire basket and make the updates to the necessary Identities. (DONE)
        - Fix Checkout Quantity Update (DONE)
        - Apply the fixes to the Delete function too. (DONE)
    
10. Checkout Component (DONE)
    - Create a Summary Component (DONE)

11. Customer Register and Login (DONE)
    - Auth0 Roles implement (DONE)
        - Configure the Managment API from Auth0 to access the UserRoles (DONE)
        - First you need to implement the role provider (DONE)
        - Set up the Backend to only get the Role for the authenticated user. (DONE)
        - Fix RoleProvider (DONE)
        - Fix AuthProvider and Private Routes (DONE)

12. Customer Personal Basket (DONE)
    - We need to store each user's basket of their own products
    - DB and API Setup
        - DB Schema
        - Router Endpoints and Frontend alignment
            -   Post product to UserBasket (DONE)
            -   Fetch UserBasket (DONE)
            -   Remove Product from UserBasket (DONE)
        - Product Configuration Changes Relect Basket
            - Product Delete (DONE)
            - Product Edit (DONE)

13. Update the UX Design of you Application to make it more eye catching. 
    - PowerPoint Reference (DONE)
    - Save all image Elements for use (NEXT)
    - Implement Design with Tailwind 

14. Submit Order Function. (DONE)
    - Create From to capture Customer Details (Can be a popup when the customer click the button)
    - Set up the backend API call


15. Look into Application Testing an Best Practices before you go live
    - Send Email to Owner when contact us is used. - 
    - Clean up the code

- Update and Fix all dependencies

- Create profiles for client
    - mongoDB
    - Auth0
    - SendGrid

- Production the Application 


- Create PayGate (In-Progress)
    - When Pay the payment is approved, the Product Basket should clear in DB and the Data should be added to a UserProductHistoryTable.
    - Create a Paygate Component
    - Integrate a Payment Gateway
    - Handle Payment Responses
    - Update Basket and Inventory
    - Security and Validations
    - Testing



    Forward Fixes: 

    1. Make the Description input fuly readable for the owner
    2. Add a field for product PN for owner. 
    3. Add filter for Products that customer can use. 
    4. Add a option to upload a excel file with all the information the product information that needs to be updated for owner. This is to help with price updates
    5. When you hover over a product picture it zooms to view the full picture. 
    6. Clear Basket Button
    7. Performance of the pictures on the Homepage should improve. 
    8. Contact Us should also send a email to a customerservice email. 
    9. Add a Out of Stock Button in the UserSettings. Button should Display Out-of-Stock Text.
    10. Gallary for Company Photos
    11. Save Customer Order Data
    12. 